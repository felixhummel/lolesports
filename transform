#!/usr/bin/env python
# vim: set fileencoding=utf-8 filetype=python :
import json
import logging
logging.basicConfig(level=logging.DEBUG)
log = logging.getLogger()
import random
import string

import envoy

with open('list.json') as f:
    d = json.load(f)


class Tournament(object):
    pass


class Game(object):

    @classmethod
    def get_game_url(cls, game_id):
        resp = envoy.run('./get_url.sh %s' % game_id)
        if resp.status_code != 0:
            log.warn('could not get url for game %s' % game_id)
        return resp.std_out.strip()

    def __repr__(self):
        return '%(tournament_id)d/%(match_id)d/%(number)d %(blue)s vs. %(red)s -- %(url)s' % self.__dict__

    @property
    def txt(self):
        return '%(tournament_id)d/%(match_id)d/%(number)d %(blue)s vs. %(red)s' % self.__dict__


class Match(object):
    """
    Just a container for games, but has the date and the maxGames.
    """
    def __init__(self, d):
        self.match_id = d['matchId']
        self.name = d['matchName']
        self.tournament_id = int(d['tournament']['id'])
        self.max_games = int(d['maxGames'])
        self.games = []
        for game_no_str, game_info in d['gamesInfo'].iteritems():
            g = Game()
            g.tournament_id = int(d['tournament']['id'])
            g.match_id = int(d['matchId'])
            g.number = int(game_no_str.replace('game', ''))
            g.id = int(game_info['id'])
            g.hasvod = game_info['hasVod']
            g.round = d['tournament']['round']
            g.url = Game.get_game_url(g.id)
            g.blue = d['contestants']['blue']['name']
            g.red = d['contestants']['red']['name']
            self.games.append(g)
        if len(self.games) < self.max_games:
            for i in range(len(self.games), self.max_games):
                dummy_game = Game()
                dummy_game.tournament_id = int(d['tournament']['id'])
                dummy_game.match_id = int(d['matchId'])
                dummy_game.number = i
                dummy_game.blue = d['contestants']['blue']['name']
                dummy_game.red = d['contestants']['red']['name']
                dummy_game.hasvod = True
                # http://www.youtube.com/watch?v=Rs8SttblARc
                yt_fake = ''.join(
                    random.choice(string.ascii_letters + string.digits) for i in range(11)
                )
                dummy_game.url = 'http://www.youtube.com/watch?v='\
                    + yt_fake
                self.games.append(dummy_game)
        self.hasvods = any(g.hasvod for g in self.games)


class Matches(list):
    def __init__(self, d):
        super(Matches, self).__init__()
        for block in d['esportsVodArchive']['firstCall']:
            for md in block['matches']:
                m = Match(md)
                if m.hasvods:
                    self.append(m)
        from operator import attrgetter
        for m in self:
            m.games.sort(key=attrgetter('number'))
        self.sort(key=attrgetter('match_id'))
        self.sort(key=attrgetter('tournament_id'))

    def __repr__(self):
        return '\n'.join(map(str, self))

    def tohtml(self):
        import jinja2
        env = jinja2.Environment(loader=jinja2.FileSystemLoader('.'))
        template = env.get_template('template.html')
        return template.render(matches=self)


#print Games(d)
print Matches(d).tohtml()
